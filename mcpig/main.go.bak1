package main

import (
	"encoding/gob"
	"fmt"
	"log"
	"math"
	"os"

	"github.com/maseology/mmio"
)

var (
	ndim  = 12
	nbins = 30
	par   = []string{"x1", "x2", "x3", "x4", "tindex", "ddfc", "baseT", "tsf", "b", "c", "alpha", "beta"}
)

func main() {
	mcdir := "S:/ormgp_lumped/mc/"
	flst := mmio.FileListExt(mcdir, ".gob")

	bins := make([][]float64, ndim)
	for i := 0; i < ndim; i++ {
		bins[i] = make([]float64, nbins)
		for j := 0; j < nbins; j++ {
			bins[i][j] = 0.
		}
	}

	wcsv, _ := mmio.NewTXTwriter(mcdir + "summary.csv")
	wcsv.WriteLine("station,bin,par,val")
	for _, fp := range flst {
		gnam := fp[len(mcdir) : len(mcdir)+7]
		fmt.Println(gnam)

		readGob := func(fp string) [][]float64 {
			var d [][]float64
			f, err := os.Open(fp)
			defer f.Close()
			if err != nil {
				log.Fatalln(err)
			}
			enc := gob.NewDecoder(f)
			err = enc.Decode(&d)
			if err != nil {
				log.Fatalln(err)
			}
			return d
		}

		denom := 0.
		for _, v := range readGob(fp) {
			objfnc := v[0]
			for i := 0; i < ndim; i++ {
				ii := int(math.Floor(v[i+1] * float64(nbins)))
				bins[i][ii] += objfnc
			}
			denom++
		}

		denom /= float64(nbins)
		for j := 0; j < nbins; j++ {
			for i := 0; i < ndim; i++ {
				val := bins[i][j] / denom
				wcsv.WriteLine(fmt.Sprintf("%s,%d,%s,%f", gnam, j+1, par[i], val))
			}
		}
	}
	wcsv.Close()
}
